use nonogram_solver::{solve_a_line, solve_nonogram};

fn main() {
    // just calculate a line
    let len = 55;

    // tuples (a: u32, b: u32) in Vec reprensent
    // empty cells or filled sells begin at 'a' (starts with 1) and length is 'b'
    let empty = vec![(1, 8), (13, 1), (17, 1), (55, 1)];
    let full = vec![(9, 4), (14, 3), (26, 1), (36, 4)];
    let limit = vec![4, 3, 2, 1, 9, 13, 1, 2];

    solve_a_line(len, &empty, &full, &limit);

    // solve nonogram
    let row_limits = vec![
        vec![0],
        vec![2],
        vec![3],
        vec![4],
        vec![3],
        //
        vec![1, 1, 1],
        vec![1, 2],
        vec![2, 1],
        vec![3, 1],
        vec![4, 2],
        //
        vec![5, 2],
        vec![5, 2],
        vec![6, 2],
        vec![1, 2, 1],
        vec![3],
        //
        vec![3, 1, 7, 1],
        vec![2, 1, 2, 7, 1],
        vec![2, 2, 3, 8, 2],
        vec![3, 1, 5, 3, 2, 3, 1],
        vec![3, 2, 6, 3, 3, 2],
        //
        vec![4, 2, 8, 2, 2, 5],
        vec![4, 2, 8, 7, 6, 6],
        vec![5, 1, 8, 3, 1, 3, 3, 3, 2],
        vec![5, 9, 1, 4, 2, 3, 3, 1],
        vec![4, 13, 5, 1, 2, 4, 2],
        //
        vec![4, 13, 3, 2, 4, 2],
        vec![3, 13, 3, 2, 10, 3],
        vec![2, 7, 1, 2, 4, 9, 3],
        vec![1, 6, 3, 14, 4],
        vec![13, 11, 4],
        //
        vec![27, 5],
        vec![7, 18, 2, 2],
        vec![7, 22, 6],
        vec![7, 6, 15, 7],
        vec![7, 5, 3, 17, 4, 2],
        //
        vec![4, 2, 10, 8, 9, 6],
        vec![4, 3, 2, 5, 8, 9, 5],
        vec![4, 3, 2, 4, 11, 6, 4],
        vec![4, 3, 3, 16, 6, 1, 2],
        vec![4, 3, 2, 1, 9, 13, 1, 2],
        //
        vec![4, 3, 1, 2, 9, 12, 5],
        vec![4, 4, 3, 22, 5],
        vec![4, 4, 3, 10, 9, 6],
        vec![4, 5, 1, 1, 19, 4],
        vec![4, 5, 2, 18],
        //
        vec![4, 6, 3, 16],
        vec![4, 7, 3, 14],
        vec![5, 6, 3, 12],
        vec![5, 7, 2, 1, 5],
        vec![6, 7, 5, 1, 3],
        //
        vec![6, 8, 12, 4],
        vec![7, 7, 7, 4],
        vec![6, 8, 7],
        vec![7, 22],
        vec![7, 16],
        //
        vec![8, 14, 5],
        vec![9, 20],
        vec![10, 18],
        vec![11, 6, 9],
        vec![11, 13],
        //
        vec![12, 9, 2],
        vec![15, 4],
        vec![29],
        vec![29],
        vec![29],
        //
        vec![29],
        vec![30],
        vec![29],
        vec![29],
        vec![31],
    ];

    let col_limits = vec![
        vec![0],
        vec![9],
        vec![14],
        vec![1, 10],
        vec![2, 7],
        //
        vec![1, 3, 4],
        vec![1, 3, 1],
        vec![3, 3, 5],
        vec![3, 7, 20],
        vec![42],
        //
        vec![46],
        vec![49],
        vec![16, 21, 1],
        vec![9, 18, 21],
        vec![7, 20, 19],
        //
        vec![8, 4, 15, 17],
        vec![9, 3, 3, 12, 15],
        vec![3, 3, 3, 5, 3, 12, 14],
        vec![2, 4, 2, 5, 2, 1, 11, 13],
        vec![2, 5, 7, 2, 3, 11, 12],
        //
        vec![2, 3, 2, 7, 1, 3, 1, 10, 11],
        vec![3, 3, 3, 4, 1, 3, 3, 10, 10],
        vec![2, 3, 1, 4, 1, 3, 3, 6, 10, 9],
        vec![4, 5, 1, 3, 2, 3, 9, 3, 8, 9],
        vec![5, 8, 2, 3, 3, 11, 1, 1, 7, 9],
        //
        vec![3, 8, 3, 6, 7, 11, 2, 8, 8],
        vec![4, 7, 1, 2, 2, 7, 11, 4, 8, 8],
        vec![4, 4, 1, 1, 4, 2, 7, 10, 3, 5, 2, 8],
        vec![2, 4, 3, 5, 22, 3, 8, 8],
        vec![2, 5, 1, 1, 3, 22, 3, 8, 8],
        //
        vec![3, 4, 23, 2, 8, 8],
        vec![4, 23, 2, 8, 8],
        vec![4, 13, 8, 2, 2, 5, 8],
        vec![3, 16, 6, 1, 2, 6, 8],
        vec![1, 17, 6, 1, 2, 5, 9],
        //
        vec![24, 2, 2, 4, 10],
        vec![4, 4, 11, 3, 4, 10],
        vec![2, 16, 5, 3, 9],
        vec![2, 16, 5, 1, 8],
        vec![1, 4, 8, 4, 6],
        //
        vec![2, 13, 1, 4],
        vec![1, 11, 2],
        vec![2, 10, 1],
        vec![1, 9],
        vec![1, 7],
        //
        vec![1, 5, 1],
        vec![1, 1, 4],
        vec![2, 11],
        vec![3, 6, 4],
        vec![2, 14],
        //
        vec![9, 8],
        vec![5, 5],
        vec![10],
        vec![6],
        vec![0],
    ];

    solve_nonogram(&row_limits, &col_limits);
}
